package Computation;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import Models.COF;
import Models.CandidateGame;
import Models.Game;
import Models.Tuple;

public class FeatureScores {
	
	public List<CandidateGame>candidateGames;
	private float[][] cofs = new float[8][8];
	private float[][] mcofs = new float[51][51];
	private float[][] tcogs = new float[84][84];
	
	private List<String> categoryNames = new ArrayList<String>();
	private List<String> mechNames = new ArrayList<String>();
	private List<String> typeNames = new ArrayList<String>();
	
	public FeatureScores(List<CandidateGame> candidateGames, List<COF>rawCOFs, List<COF>rawMCOFs, List<COF>rawTCOFs) {
		this.candidateGames = candidateGames;
		LoadCategoryNames();
		LoadMechNames();
		LoadTypeNames();
		LoadCOFs(rawCOFs);
		LoadMCOFs(rawMCOFs);
		LoadTCOFs(rawTCOFs);
	}
	
	/*
	 * Calculated individual of the scores
	 * 
	 */
	private void CalculatePopularity(CandidateGame candidateGame, Tuple<Float,Float>minmax) {
		
		Game candidate = candidateGame.game;
		if(candidate.avg_rating <= 4.9) {
			candidateGame.popularityScore = -1 * candidate.no_ratings + candidate.avg_rating;
		}else {
			candidateGame.popularityScore = candidate.no_ratings + candidate.avg_rating;
		}
		
		if (candidateGame.popularityScore < minmax.getLeft())
			minmax.setLeft(candidateGame.popularityScore);
		if (candidateGame.popularityScore > minmax.getRight())
			minmax.setRight(candidateGame.popularityScore);
		
	}
	
	private void CalculateComplexity(Game designatedGame, CandidateGame candidateGame, Tuple<Float,Float>minmax) {
		candidateGame.complexityScore = -1 * 
				Math.abs(designatedGame.complexity - candidateGame.game.complexity);
		
		if (candidateGame.complexityScore < minmax.getLeft())
			minmax.setLeft(candidateGame.complexityScore);
		if (candidateGame.complexityScore > minmax.getRight())
			minmax.setRight(candidateGame.complexityScore);
	}
	
	private void CalculatePlayTime(Game designatedGame, CandidateGame candidateGame, Tuple<Float,Float>minmax) {
		Game candidate = candidateGame.game;
		float avgTimeDG = (designatedGame.min_time + designatedGame.max_time) / 2.0f;
		float avgTimeCG = (candidate.min_time + candidate.max_time) / 2.0f;
		
		float diff = Math.abs(avgTimeDG - avgTimeCG);
		
		if (diff > 5)
			candidateGame.playTimeScore = -1 * diff;
		else
			candidateGame.playTimeScore = avgTimeDG;
		
		if (candidateGame.playTimeScore < minmax.getLeft())
			minmax.setLeft(candidateGame.playTimeScore);
		if (candidateGame.playTimeScore > minmax.getRight())
			minmax.setRight(candidateGame.playTimeScore);
		
	}
	
	private void CalculatePlayers(Game designatedGame, CandidateGame candidateGame, Tuple<Float,Float>minmax) {
		Game candidate = candidateGame.game;
		int sumOfPlayersDG = 0;
		int sumOfPlayersCG = 0;
		int diff = designatedGame.max_players - designatedGame.min_players;
		
		for(int i = designatedGame.min_players; i <= designatedGame.max_players; i++) {
			sumOfPlayersDG += i;
		}
		
		for(int i = candidate.min_players; i <= candidate.max_players; i++) {
			sumOfPlayersCG += -1*i;
		}
		
		candidateGame.playersScore = sumOfPlayersDG + sumOfPlayersCG; 
		
		if(diff>0){
			candidateGame.playersScore *= -1;
		}
		
		if (candidateGame.playersScore < minmax.getLeft())
			minmax.setLeft(candidateGame.playersScore);
		if (candidateGame.playersScore > minmax.getRight())
			minmax.setRight(candidateGame.playersScore);
	}
	
	private void CalculateCategories(List<Game>profile, CandidateGame candidateGame, Tuple<Float,Float>minmax) {
		candidateGame.categoryScore = 0;
		int categoriesInCandidateGame = candidateGame.game.categories.size();
		//For every profile Game
		for(Iterator<Game> i = profile.iterator(); i.hasNext(); ) {
		    Game profileGame = i.next();
		    int categoriesInProfileGame = profileGame.categories.size();
		    
		    //Get every set of categories between the profile game and the candidateGame
		    Set<Tuple<String,String>>Z = new HashSet<Tuple<String,String>>();
		    for(Iterator<String> p = profileGame.categories.iterator(); p.hasNext(); ) {
			    String profileCategory= p.next();
			    for(Iterator<String> c = candidateGame.game.categories.iterator(); c.hasNext(); ) {
				    String candidateCategory= c.next();
				    Tuple<String,String> tuple = new Tuple<String,String>(profileCategory, candidateCategory);
				    Z.add(tuple);
			    }
		    }
		    float COFSums = 0;
		    
		    //Find SUM of the COFS for each set in Z
		    for(Iterator<Tuple<String,String>> t = Z.iterator(); t.hasNext(); ) {
			    Tuple tuple= t.next();
			    int row = categoryNames.indexOf(tuple.getLeft());
			    int col = categoryNames.indexOf(tuple.getRight());
			    COFSums += cofs[row][col];
		    }
		    
		    float valueFromProfileGame = COFSums / (categoriesInCandidateGame * categoriesInProfileGame);
		    candidateGame.categoryScore += valueFromProfileGame;
		    
		    if (candidateGame.categoryScore < minmax.getLeft())
				minmax.setLeft(candidateGame.categoryScore);
			if (candidateGame.categoryScore > minmax.getRight())
				minmax.setRight(candidateGame.categoryScore);
		    
		}
	}
	/*
	 * Calculated all of the scores
	 * 
	 */
	public void CalculateScoresAgainstDesignatedGame(Game designatedGame) {
		Tuple<Float,Float>popMinMax = new Tuple<Float,Float>(Float.MAX_VALUE,Float.MIN_VALUE);
		Tuple<Float,Float>compMinMax = new Tuple<Float,Float>(Float.MAX_VALUE,Float.MIN_VALUE);
		Tuple<Float,Float>playersMinMax = new Tuple<Float,Float>(Float.MAX_VALUE,Float.MIN_VALUE);
		Tuple<Float,Float>timeMinMax = new Tuple<Float,Float>(Float.MAX_VALUE,Float.MIN_VALUE);
		
		for(Iterator<CandidateGame> i = this.candidateGames.iterator(); i.hasNext(); ) {
		    CandidateGame game = i.next();
		    CalculatePopularity(game, popMinMax);
		    CalculateComplexity(designatedGame, game, compMinMax);
		    CalculatePlayTime(designatedGame, game, timeMinMax);
		    CalculatePlayers(designatedGame, game, playersMinMax);
		}
		
		//Normalize scores
		for(Iterator<CandidateGame> i = this.candidateGames.iterator(); i.hasNext(); ) {
		    CandidateGame game = i.next();
		    game.popularityScore = (game.popularityScore - popMinMax.getLeft()) / (popMinMax.getRight() - popMinMax.getLeft());
		    game.complexityScore = (game.complexityScore - compMinMax.getLeft()) / (compMinMax.getRight() - compMinMax.getLeft());
		    game.playTimeScore = (game.playTimeScore - timeMinMax.getLeft()) / (timeMinMax.getRight() - timeMinMax.getLeft());
		    game.playersScore = (game.playersScore - playersMinMax.getLeft()) / (playersMinMax.getRight() - playersMinMax.getLeft());;
		}
	}
	
	
	public void CalculateScoresAgainstProfileGames(List<Game>profile) {
		Tuple<Float,Float>catMinMax = new Tuple<Float,Float>(Float.MAX_VALUE,Float.MIN_VALUE);
		
		for(Iterator<CandidateGame> i = this.candidateGames.iterator(); i.hasNext(); ) {
		    CandidateGame game = i.next();
		    CalculateCategories(profile, game, catMinMax);
		}
		
		//Normalize scores
		for(Iterator<CandidateGame> i = this.candidateGames.iterator(); i.hasNext(); ) {
		    CandidateGame game = i.next();
		    game.categoryScore = (game.categoryScore - catMinMax.getLeft()) / (catMinMax.getRight() - catMinMax.getLeft()); 
		    if(Float.isNaN(game.categoryScore))
		    	game.categoryScore = 0;
		    game.CalculateBasicOverallScore();
		}
	}
	
	private void LoadCOFs(List<COF>rawCOFs) {
		for(Iterator<COF> i = rawCOFs.iterator(); i.hasNext(); ) {
		    COF cof = i.next();
		    int row = categoryNames.indexOf(cof.category1);
		    int col = categoryNames.indexOf(cof.category2);
		    cofs[row][col] = cof.cof;
		}
	}
	
	private void LoadMCOFs(List<COF>rawCOFs) {
		for(Iterator<COF> i = rawCOFs.iterator(); i.hasNext(); ) {
		    COF cof = i.next();
		    int row = mechNames.indexOf(cof.category1);
		    int col = mechNames.indexOf(cof.category2);
		    cofs[row][col] = cof.cof;
		}
	}
	
	private void LoadTCOFs(List<COF>rawCOFs) {
		for(Iterator<COF> i = rawCOFs.iterator(); i.hasNext(); ) {
		    COF cof = i.next();
		    int row = typeNames.indexOf(cof.category1);
		    int col = typeNames.indexOf(cof.category2);
		    cofs[row][col] = cof.cof;
		}
	}
	
	private void LoadCategoryNames() {
		categoryNames.add("Strategy");
		categoryNames.add("Family");
		categoryNames.add("Thematic");
		categoryNames.add("Customizable");
		categoryNames.add("Wargames");
		categoryNames.add("Abstract");
		categoryNames.add("Party");
		categoryNames.add("Children's");
	}
	
	private void LoadMechNames() {
		String[] mechArray = {"Acting","Action / Movement Programming","Action Point Allowance System","Area Control / Area Influence","Area Enclosure","Area Movement","Area-Impulse",
		   "Auction/Bidding","Betting/Wagering","Campaign / Battle Card Driven","Card Drafting","Chit-Pull System",
		   "Co-operative Play","Commodity Speculation","Crayon Rail System","Deck / Pool Building","Dice Rolling",
		   "Grid Movement","Hand Management","Hex-and-Counter","Line Drawing","Memory","Modular Board","Paper-and-Pencil",
		   "Partnerships","Pattern Building","Pattern Recognition","Pick-up and Deliver","Player Elimination",
		   "Point to Point Movement","Press Your Luck","Rock-Paper-Scissors","Role Playing","Roll / Spin and Move",
		   "Route/Network Building","Secret Unit Deployment","Set Collection","Simulation","Simultaneous Action Selection",
		   "Singing","Stock Holding","Storytelling","Take That","Tile Placement","Time Track","Trading",
		   "Trick-taking","Variable Phase Order","Variable Player Powers","Voting","Worker Placement"};
		mechNames = Arrays.asList(mechArray);
	}
	
	private void LoadTypeNames() {
		String[] typeArray = {"Abstract Strategy","Action / Dexterity","Adventure","Age of Reason","American Civil War",
		"American Indian Wars","American Revolutionary War","American West","Ancient","Animals","Arabian","Aviation / Flight","Bluffing","Book",
		"Card Game","Children's Game","City Building","Civil War","Civilization","Collectible Components","Comic Book / Strip","Deduction",
		"Dice","Economic","Educational","Electronic","Environmental","Expansion for Base-game","Exploration","Fan Expansion","Fantasy","Farming","Fighting",
		"Game System","Horror","Humor","Industry / Manufacturing","Korean War","Mafia","Math","Mature / Adult","Maze","Medical","Medieval","Memory",
		"Miniatures","Modern Warfare","Movies / TV / Radio theme","Murder/Mystery","Music","Mythology","Napoleonic","Nautical","Negotiation","Novel-based","Number",
		"Party Game","Pike and Shot","Pirates","Political","Post-Napoleonic","Prehistoric","Print & Play","Puzzle","Racing","Real-time","Religious","Renaissance",
		"Science Fiction","Space Exploration","Spies/Secret Agents","Sports","Territory Building","Trains","Transportation","Travel","Trivia","Video Game Theme","Vietnam War",
		"Wargame","Word Game","World War I","World War II","Zombies"};
		mechNames = Arrays.asList(typeArray);
	}
}
