package Interface;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import Computation.GameRanker;
import DBAccessor.GameAccessor;
import Models.CandidateGame;
import Models.Game;
import Models.Profile;

public class TTGameRec {

	private static GameAccessor accessor = new GameAccessor();
	
	public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {
		
		int person = 4;
		
		TTGameRec rec = new TTGameRec();
		Profile p = new Profile(accessor, person);
		List<Game>profile = p.profile;
		//List<Game>profile = new ArrayList<Game>();
		Game designatedGame = p.designatedGame;
		profile.add(designatedGame);
		
		System.out.println("\n\nGenerating Recommendations...\n\n");
		
		GameRanker ranker = new GameRanker(accessor, profile, designatedGame);
		List<CandidateGame> topGames = ranker.GetTopNGames(3);
		System.out.println("-------------------------------");
		
		// For the html page title area
		PrintWriter writer = new PrintWriter("GameRanks.html","UTF8");
		writer.println("<style> h1 {color: gold;} a {text-decoration: none; color:orange;}"
		+" body {font-family:'Titillium Web', sans-serif;} "
		+"img.displayed { display: block;margin-left: auto; margin-right: auto }"
		+ "</style>");
		writer.println("<body background=\"file:///Users/IrisSeaman/Documents/TableTopGames/PeGRec/lib/pattern.jpg\"");
	    writer.println("</br><img src=\"file:///Users/IrisSeaman/Documents/TableTopGames/PeGRec/lib/logo2.png\" hspace=\"60\" > <p></br>");
		int rank = 1;   
		
		//Printing the designated Game
		writer.println(rec.GetHtml(designatedGame));
		//Printing the recommendations
		for(Iterator<CandidateGame> i = topGames.iterator(); i.hasNext(); ) {
			CandidateGame game = i.next();
			System.out.println(game.toString());
			System.out.println("-------------------------------");
			
			writer.println(game.GetHtml(rank));
			
			rank++;
		}
		writer.close();
	}
	
	public String GetHtml(Game game) {
		
		String html = "<center><h3>Your Game</h3></center><p>"
		  		+ "<table cellpadding='15' align=\"center\">"
		  		+ "<tr bgcolor=\"white\" height= '200px' style=\"outline: thin solid black\">"
//		  		// First column
//		  		+ "<td align=\"center\" width='30px'><h3>"
//		  		+  "Your Game" + "</h3></br>"
//		  		+ "</td>"
		  		// Sec column
		  		+ "<td width='350px' >"
		  		+ "<img class='displayed' src=' "+ game.image_link + "' height:90>"
		  		//+ "<a href=\"\"><img ng-src={{"+game.image_link+"}} alt=\"icon\" width=\"80\" height=\"auto\" class='.img-thumbnail' /></a>"
		  		+ "</td>"
		  		
		  		// Third column
		  		+ "<td width ='550px' >"
		  		+ " <h3><a href= 'https://boardgamegeek.com/boardgame/" +game.id+ "/'>"+game.title+"</a></h3><small><b> "
		  		+ game.GetShortDescription(200) //+ "</br></br>Avg Rating: " + game.avg_rating + "</br>No. Ratings: " + game.no_ratings 
		  		+ "</b></br><br>Complexity: " + game.complexity + "</br>Players: " + getStrRange(game.min_players, game.max_players) 
		  		+ "</br> Approx Time: " + getStrRange(game.min_time, game.max_time)
		  		+ "</br> Categories: " + game.GetStringFromList(game.categories)
		  		+ "</br> Mechanics: " + game.GetStringFromList(game.mechanics)
		  		+ "</br> Types: " + game.GetStringFromList(game.types)
		  		+ " </small></br></td> </tr></table><p><p><center><h3>Your Recommendations</h3></center><p>";
		  return html;
	}
	
	private String getStrRange(int min, int max) {
		StringBuilder str = new StringBuilder();
		if (min == max) {
			str.append(Integer.toString(min));
		}
		else {
			str.append(Integer.toString(min));
			str.append("-");
			str.append(Integer.toString(max));
		}
		return str.toString();
	}
	
	/*
    private List<Game> CreateProfile_Eric_2() {
		List<Game>profile = new ArrayList<Game>();
		ArrayList<String> gameNames = new ArrayList<String>() {{
			add("Secret Hitler");
		    add("The Resistance: Avalon");
		    add("Ultimate Werewolf: Ultimate Edition");
		}};
		
		for(Iterator<String> i = gameNames.iterator(); i.hasNext(); ) {
		    String name = i.next();
		    Game game = accessor.GetGameByName(name);
		    profile.add(game);
		    System.out.println(game.toString());
		}
		
		return profile;
	}
	
	private Game CreateDesignatedGame_Eric_2() {
		String name = "Secret Hitler";
		Game game = accessor.GetGameByName(name);
		System.out.println(game.toString());
		return game;
	}
	
	
	private List<Game> CreateProfile_Eric() {
		List<Game>profile = new ArrayList<Game>();
		ArrayList<String> gameNames = new ArrayList<String>() {{
		    add("Betrayal at House on the Hill");
		    add("Specter Ops");
		    add("Smash Up");
		}};
		
		for(Iterator<String> i = gameNames.iterator(); i.hasNext(); ) {
		    String name = i.next();
		    Game game = accessor.GetGameByName(name);
		    profile.add(game);
		    System.out.println(game.toString());
		}
		
		return profile;
	}
	
	private Game CreateDesignatedGame_Eric() {
		String name = "Five Tribes";
		Game game = accessor.GetGameByName(name);
		System.out.println(game.toString());
		return game;
	}
	
	private List<Game> CreateProfile_Brock() {
		List<Game>profile = new ArrayList<Game>();
		ArrayList<String> gameNames = new ArrayList<String>() {{
		    add("Ticket to Ride");
		    add("Carcassonne");
		    add("Guillotine");
		}};
		
		for(Iterator<String> i = gameNames.iterator(); i.hasNext(); ) {
		    String name = i.next();
		    Game game = accessor.GetGameByName(name);
		    profile.add(game);
		    System.out.println(game.toString());
		}
		
		return profile;
	}
	
	private Game CreateDesignatedGame_Brock() {
		String name = "Catan";
		Game game = accessor.GetGameByName(name);
		System.out.println(game.toString());
		return game;
	}
	
	private List<Game> CreateProfile_Kevin() {
		List<Game>profile = new ArrayList<Game>();
		ArrayList<String> gameNames = new ArrayList<String>() {{
		    add("Betrayal at House on the Hill");
		    add("Dead of Winter: A Crossroads Game");
		    add("Smash Up");
		}};
		
		for(Iterator<String> i = gameNames.iterator(); i.hasNext(); ) {
		    String name = i.next();
		    Game game = accessor.GetGameByName(name);
		    profile.add(game);
		    System.out.println(game.toString());
		}
		
		return profile;
	}
	
	private Game CreateDesignatedGame_Kevin() {
		String name = "Betrayal at House on the Hill";
		Game game = accessor.GetGameByName(name);
		System.out.println(game.toString());
		return game;
	}
	
	private List<Game> CreateProfile_Iris() {
		List<Game>profile = new ArrayList<Game>();
		ArrayList<String> gameNames = new ArrayList<String>() {{
		    add("Spot it!");
		    add("Guillotine");
		    add("Cranium");
		}};
		
		for(Iterator<String> i = gameNames.iterator(); i.hasNext(); ) {
		    String name = i.next();
		    Game game = accessor.GetGameByName(name);
		    profile.add(game);
		    System.out.println(game.toString());
		}
		
		return profile;
	}
	
	
	private Game CreateDesignatedGame_Iris() {
		String name = "Catch Phrase!";
		Game game = accessor.GetGameByName(name);
		System.out.println(game.toString());
		return game;
	}
	
	private Game CreateDesignatedGame1() {
		String name = "Pandemic Legacy: Season 1";
		Game game = accessor.GetGameByName(name);
		//System.out.println(game.toString());
		return game;
	}
	
	private List<Game> CreateProfile1() {
		List<Game>profile = new ArrayList<Game>();
		ArrayList<String> gameNames = new ArrayList<String>() {{
		    add("Puerto Rico");
		    add("Agricola");
		    add("Power Grid");
		    add("7 Wonders");
		    add("Eldritch Horror");
		}};
		
		for(Iterator<String> i = gameNames.iterator(); i.hasNext(); ) {
		    String name = i.next();
		    Game game = accessor.GetGameByName(name);
		    profile.add(game);
		    //System.out.println(game.toString());
		}
		
		return profile;
	}
		
	private void TestGetGameByName() {
		System.out.println(accessor.GetGameByName("Twilight Struggle"));
	}*/
    
}
